{"version":3,"file":"Deferred.js","names":["DeferredPromise","_Promise","_inherits2","_super","_createSuper","resolver","_this","_classCallCheck2","that","call","resolve","reject","Object","assign","_assertThisInitialized2","_createClass2","_wrapNativeSuper2","Promise","exports","DeferredTrigger","_DeferredPromise","_super2","load","_this2","length","_workload","_possibleConstructorReturn2","key","value","trigger","_this3","then","data","reason","Defer","workload","_reject","_resolve","_onTrigger","_p","bind","_executor","_executorCache","undefined","forEach","fn","apply","arguments","promise","onTrigger","callback","push","Error"],"sources":["../../src/src/Deferred.js"],"sourcesContent":["\n\n/**\n * @desc\n * implements deferred pattern\n * extended promise with exposed resolve and reject handlers\n *\n * passed resolver function\n *\n * @param? {Function} resolver function taking two params: function resolve and function reject\n * \t\tthis parameter is provided as default\n */\nexport class DeferredPromise extends Promise {\n\tconstructor(resolver) {\n\t\tconst that = {};\n\t\tsuper(function(resolve, reject) {\n\t\t\tObject.assign(that, {resolve, reject})\n\t\t});\n\t\tObject.assign(this, that)\n\t\tif (resolver) {\n\t\t\tresolver(this.resolve, this.reject)\n\t\t}\n\t}\n}\n\n/**\n * @desc\n * extended Deferred\n *\n * example:\n * \t\tnew Deferred(() => http.get(url))\n *\n * if we need to pass promise but we do not want to do the actual work yet\n * like e.g. REST calls throttling.\n *\n * @param {Function} takes as argument factory returning promise\n */\nexport class DeferredTrigger extends DeferredPromise {\n\tconstructor(load) {\n\t\tif (load.length == 2) {\n\t\t\tsuper(load);\n\t\t}\n\t\tif (!load.length) {\n\t\t\tsuper(function(resolve, reject) {});\n\t\t\tthis._workload = load \n\t\t}\n\t}\n\n\ttrigger() {\n\t\treturn this._workload()\n\t\t\t.then((data) => {\n\t\t\t\tthis.resolve(data)\n\t\t\t})\n\t\t\t.catch(reason => {\n\t\t\t\tthis.reject(reason)\n\t\t\t})\n\t}\n}\n\n/**\n * @desc\n * factory method returning a deferred object containing a promise and the lever to trigger\n * to settle the promise.\n *\n * @param {Function} factory function returning a Promise (which needs to be deffered)\n *\n * @returns {Objcect} with deferred promise and an executor which triggers the promise fullfillment\n **/\nexport function Defer(workload) {\n\tlet _reject, _resolve, _onTrigger = [];\n\tconst _p = new Promise(function (resolve, reject) {\n\t\t_resolve = resolve;\n\t\t_reject = reject;\n\t}.bind(Defer))\n\n\tconst _executor = (function (workload) {\n\t\tlet _executorCache = undefined;\n\n\t\treturn function(...args) {\n\t\t\tif (_executorCache) {\n\t\t\t\treturn _executorCache;\n\t\t\t}\n\t\t\t// emit onTrigger only first time the workload is executed\n\t\t\t_onTrigger.forEach((fn) => { fn() })\n\t\t\treturn _executorCache = workload(...args)\n\t\t\t\t.then(data => {\n\t\t\t\t\t_resolve(data)\n\t\t\t\t})\n\t\t\t\t.catch(reason => {\n\t\t\t\t\t_reject(reason)\n\t\t\t\t})\n\t\t}\n\t})(workload)\n\n\treturn {\n\t\tget promise() { return _p },\n\n\t\tonTrigger(callback) {\n\t\t\tif (typeof callback === 'function') {\n\t\t\t\t_onTrigger.push(callback)\n\t\t\t} else {\n\t\t\t\tthrow Error('Callback must be type of function.')\n\t\t\t}\n\t\t},\n\n\t\ttrigger(...args) {\n\t\t\treturn _executor(...args)\n\t\t}\n\t}\n}\n"],"mappings":"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"}